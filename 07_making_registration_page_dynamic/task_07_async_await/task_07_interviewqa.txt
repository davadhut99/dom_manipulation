-----------------------------------------------------------------------------------------------------------------------------

    Que.-Why were promises discovered?
            Originally they were designed to decouple variable values 
            from the time and place of their calculation, making parallelisation easier. L
            ater, they were re-discovered for their ability to simplify asynchronous code by moving 
            it to a more direct style rather than the continuation passing style necessitated without them.


-----------------------------------------------------------------------------------------------------------------------------

    Que.- Why are async await better than promise.then design pattern? ? Explain with an example.
            1. Promises:

            A Promise in NodeJS is similar to a promise in real life. 
            It is an assurance that something will be done. Promise is used to keep 
            track of whether the asynchronous event has been executed or not and determines what happens 
            after the event has occurred. It is an object having 3 states namely:

            Pending: Initial State, before the event has happened.
            Resolved: After the operation completed successfully.
            Rejected: If the operation had error during execution, the promise fails.
            Example: While requesting data from a database server, the Promise is in a pending state 
            until the data is received. If the data is received successfully, then the Promise is in 
            resolved state and if the data could not be received successfully, the Promise is in the rejected state. 

            Error Handling of Promises: For a successfully resolved promise, we use .then() method 
            and for rejected promise, we use .catch() method. To run a code after the promise has been handled 
            using .then() or .catch() method, we can .finally() method. The code inside .finally() method runs 
            once regardless of the state of the promise.


            2. Async/Await:

            Async/Await is used to work with promises in asynchronous functions. 
            It is basically syntactic sugar for promises. It is just a wrapper to restyle code 
            and make promises easier to read and use. It makes asynchronous code look more like 
            synchronous/procedural code, which is easier to understand.

            await can only be used in async functions. It is used for calling an async 
            function and waits for it to resolve or reject. await blocks the execution of the code
            within the async function in which it is located. 

            Error Handling in Async/Await: For a successfully resolved promise, 
            we use try and for rejected promise, we use catch. To run a code after the promise 
            has been handled using try or catch, we can .finally() method. The code inside .finally() 
            method runs once regardless of the state of the promise.

            -----------------------------------------------------------------------------------------------------------------------------